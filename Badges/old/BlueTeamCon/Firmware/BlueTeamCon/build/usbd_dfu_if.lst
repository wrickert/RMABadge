ARM GAS  /tmp/ccuPWxjq.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"usbd_dfu_if.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MEM_If_Init_FS,"ax",%progbits
  16              		.align	1
  17              		.arch armv6s-m
  18              		.syntax unified
  19              		.code	16
  20              		.thumb_func
  21              		.fpu softvfp
  23              	MEM_If_Init_FS:
  24              	.LFB43:
  25              		.file 1 "Src/usbd_dfu_if.c"
   1:Src/usbd_dfu_if.c **** /* USER CODE BEGIN Header */
   2:Src/usbd_dfu_if.c **** /**
   3:Src/usbd_dfu_if.c ****   ******************************************************************************
   4:Src/usbd_dfu_if.c ****   * @file           : usbd_dfu_if.c
   5:Src/usbd_dfu_if.c ****   * @brief          : Usb device for Download Firmware Update.
   6:Src/usbd_dfu_if.c ****   ******************************************************************************
   7:Src/usbd_dfu_if.c ****   * @attention
   8:Src/usbd_dfu_if.c ****   *
   9:Src/usbd_dfu_if.c ****   * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  10:Src/usbd_dfu_if.c ****   * All rights reserved.</center></h2>
  11:Src/usbd_dfu_if.c ****   *
  12:Src/usbd_dfu_if.c ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Src/usbd_dfu_if.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Src/usbd_dfu_if.c ****   * the License. You may obtain a copy of the License at:
  15:Src/usbd_dfu_if.c ****   *                             www.st.com/SLA0044
  16:Src/usbd_dfu_if.c ****   *
  17:Src/usbd_dfu_if.c ****   ******************************************************************************
  18:Src/usbd_dfu_if.c ****   */
  19:Src/usbd_dfu_if.c **** /* USER CODE END Header */
  20:Src/usbd_dfu_if.c **** 
  21:Src/usbd_dfu_if.c **** /* Includes ------------------------------------------------------------------*/
  22:Src/usbd_dfu_if.c **** #include "usbd_dfu_if.h"
  23:Src/usbd_dfu_if.c **** 
  24:Src/usbd_dfu_if.c **** /* USER CODE BEGIN INCLUDE */
  25:Src/usbd_dfu_if.c **** 
  26:Src/usbd_dfu_if.c **** /* USER CODE END INCLUDE */
  27:Src/usbd_dfu_if.c **** 
  28:Src/usbd_dfu_if.c **** /* Private typedef -----------------------------------------------------------*/
  29:Src/usbd_dfu_if.c **** /* Private define ------------------------------------------------------------*/
  30:Src/usbd_dfu_if.c **** /* Private macro -------------------------------------------------------------*/
  31:Src/usbd_dfu_if.c **** 
  32:Src/usbd_dfu_if.c **** /* USER CODE BEGIN PV */
  33:Src/usbd_dfu_if.c **** /* Private variables ---------------------------------------------------------*/
ARM GAS  /tmp/ccuPWxjq.s 			page 2


  34:Src/usbd_dfu_if.c **** 
  35:Src/usbd_dfu_if.c **** /* USER CODE END PV */
  36:Src/usbd_dfu_if.c **** 
  37:Src/usbd_dfu_if.c **** /** @addtogroup STM32_USB_OTG_DEVICE_LIBRARY
  38:Src/usbd_dfu_if.c ****   * @brief Usb device.
  39:Src/usbd_dfu_if.c ****   * @{
  40:Src/usbd_dfu_if.c ****   */
  41:Src/usbd_dfu_if.c **** 
  42:Src/usbd_dfu_if.c **** /** @defgroup USBD_DFU
  43:Src/usbd_dfu_if.c ****   * @brief Usb DFU device module.
  44:Src/usbd_dfu_if.c ****   * @{
  45:Src/usbd_dfu_if.c ****   */
  46:Src/usbd_dfu_if.c **** 
  47:Src/usbd_dfu_if.c **** /** @defgroup USBD_DFU_Private_TypesDefinitions
  48:Src/usbd_dfu_if.c ****   * @brief Private types.
  49:Src/usbd_dfu_if.c ****   * @{
  50:Src/usbd_dfu_if.c ****   */
  51:Src/usbd_dfu_if.c **** 
  52:Src/usbd_dfu_if.c **** /* USER CODE BEGIN PRIVATE_TYPES */
  53:Src/usbd_dfu_if.c **** 
  54:Src/usbd_dfu_if.c **** /* USER CODE END PRIVATE_TYPES */
  55:Src/usbd_dfu_if.c **** 
  56:Src/usbd_dfu_if.c **** /**
  57:Src/usbd_dfu_if.c ****   * @}
  58:Src/usbd_dfu_if.c ****   */
  59:Src/usbd_dfu_if.c **** 
  60:Src/usbd_dfu_if.c **** /** @defgroup USBD_DFU_Private_Defines
  61:Src/usbd_dfu_if.c ****   * @brief Private defines.
  62:Src/usbd_dfu_if.c ****   * @{
  63:Src/usbd_dfu_if.c ****   */
  64:Src/usbd_dfu_if.c **** 
  65:Src/usbd_dfu_if.c **** #define FLASH_DESC_STR      "@Internal Flash   /0x08000000/03*016Ka,01*016Kg,01*064Kg,07*128Kg,04*0
  66:Src/usbd_dfu_if.c **** 
  67:Src/usbd_dfu_if.c **** /* USER CODE BEGIN PRIVATE_DEFINES */
  68:Src/usbd_dfu_if.c **** 
  69:Src/usbd_dfu_if.c **** /* USER CODE END PRIVATE_DEFINES */
  70:Src/usbd_dfu_if.c **** 
  71:Src/usbd_dfu_if.c **** /**
  72:Src/usbd_dfu_if.c ****   * @}
  73:Src/usbd_dfu_if.c ****   */
  74:Src/usbd_dfu_if.c **** 
  75:Src/usbd_dfu_if.c **** /** @defgroup USBD_DFU_Private_Macros
  76:Src/usbd_dfu_if.c ****   * @brief Private macros.
  77:Src/usbd_dfu_if.c ****   * @{
  78:Src/usbd_dfu_if.c ****   */
  79:Src/usbd_dfu_if.c **** 
  80:Src/usbd_dfu_if.c **** /* USER CODE BEGIN PRIVATE_MACRO */
  81:Src/usbd_dfu_if.c **** 
  82:Src/usbd_dfu_if.c **** /* USER CODE END PRIVATE_MACRO */
  83:Src/usbd_dfu_if.c **** 
  84:Src/usbd_dfu_if.c **** /**
  85:Src/usbd_dfu_if.c ****   * @}
  86:Src/usbd_dfu_if.c ****   */
  87:Src/usbd_dfu_if.c **** 
  88:Src/usbd_dfu_if.c **** /** @defgroup USBD_DFU_Private_Variables
  89:Src/usbd_dfu_if.c ****   * @brief Private variables.
  90:Src/usbd_dfu_if.c ****   * @{
ARM GAS  /tmp/ccuPWxjq.s 			page 3


  91:Src/usbd_dfu_if.c ****   */
  92:Src/usbd_dfu_if.c **** 
  93:Src/usbd_dfu_if.c **** /* USER CODE BEGIN PRIVATE_VARIABLES */
  94:Src/usbd_dfu_if.c **** 
  95:Src/usbd_dfu_if.c **** /* USER CODE END PRIVATE_VARIABLES */
  96:Src/usbd_dfu_if.c **** 
  97:Src/usbd_dfu_if.c **** /**
  98:Src/usbd_dfu_if.c ****   * @}
  99:Src/usbd_dfu_if.c ****   */
 100:Src/usbd_dfu_if.c **** 
 101:Src/usbd_dfu_if.c **** /** @defgroup USBD_DFU_Exported_Variables
 102:Src/usbd_dfu_if.c ****   * @brief Public variables.
 103:Src/usbd_dfu_if.c ****   * @{
 104:Src/usbd_dfu_if.c ****   */
 105:Src/usbd_dfu_if.c **** 
 106:Src/usbd_dfu_if.c **** extern USBD_HandleTypeDef hUsbDeviceFS;
 107:Src/usbd_dfu_if.c **** 
 108:Src/usbd_dfu_if.c **** /* USER CODE BEGIN EXPORTED_VARIABLES */
 109:Src/usbd_dfu_if.c **** 
 110:Src/usbd_dfu_if.c **** /* USER CODE END EXPORTED_VARIABLES */
 111:Src/usbd_dfu_if.c **** 
 112:Src/usbd_dfu_if.c **** /**
 113:Src/usbd_dfu_if.c ****   * @}
 114:Src/usbd_dfu_if.c ****   */
 115:Src/usbd_dfu_if.c **** 
 116:Src/usbd_dfu_if.c **** /** @defgroup USBD_DFU_Private_FunctionPrototypes
 117:Src/usbd_dfu_if.c ****   * @brief Private functions declaration.
 118:Src/usbd_dfu_if.c ****   * @{
 119:Src/usbd_dfu_if.c ****   */
 120:Src/usbd_dfu_if.c **** 
 121:Src/usbd_dfu_if.c **** static uint16_t MEM_If_Init_FS(void);
 122:Src/usbd_dfu_if.c **** static uint16_t MEM_If_Erase_FS(uint32_t Add);
 123:Src/usbd_dfu_if.c **** static uint16_t MEM_If_Write_FS(uint8_t *src, uint8_t *dest, uint32_t Len);
 124:Src/usbd_dfu_if.c **** static uint8_t *MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len);
 125:Src/usbd_dfu_if.c **** static uint16_t MEM_If_DeInit_FS(void);
 126:Src/usbd_dfu_if.c **** static uint16_t MEM_If_GetStatus_FS(uint32_t Add, uint8_t Cmd, uint8_t *buffer);
 127:Src/usbd_dfu_if.c **** 
 128:Src/usbd_dfu_if.c **** /* USER CODE BEGIN PRIVATE_FUNCTIONS_DECLARATION */
 129:Src/usbd_dfu_if.c **** 
 130:Src/usbd_dfu_if.c **** /* USER CODE END PRIVATE_FUNCTIONS_DECLARATION */
 131:Src/usbd_dfu_if.c **** 
 132:Src/usbd_dfu_if.c **** /**
 133:Src/usbd_dfu_if.c ****   * @}
 134:Src/usbd_dfu_if.c ****   */
 135:Src/usbd_dfu_if.c **** 
 136:Src/usbd_dfu_if.c **** #if defined ( __ICCARM__ ) /* IAR Compiler */
 137:Src/usbd_dfu_if.c ****   #pragma data_alignment=4
 138:Src/usbd_dfu_if.c **** #endif
 139:Src/usbd_dfu_if.c **** __ALIGN_BEGIN USBD_DFU_MediaTypeDef USBD_DFU_fops_FS __ALIGN_END =
 140:Src/usbd_dfu_if.c **** {
 141:Src/usbd_dfu_if.c ****    (uint8_t*)FLASH_DESC_STR,
 142:Src/usbd_dfu_if.c ****     MEM_If_Init_FS,
 143:Src/usbd_dfu_if.c ****     MEM_If_DeInit_FS,
 144:Src/usbd_dfu_if.c ****     MEM_If_Erase_FS,
 145:Src/usbd_dfu_if.c ****     MEM_If_Write_FS,
 146:Src/usbd_dfu_if.c ****     MEM_If_Read_FS,
 147:Src/usbd_dfu_if.c ****     MEM_If_GetStatus_FS
ARM GAS  /tmp/ccuPWxjq.s 			page 4


 148:Src/usbd_dfu_if.c **** };
 149:Src/usbd_dfu_if.c **** 
 150:Src/usbd_dfu_if.c **** /* Private functions ---------------------------------------------------------*/
 151:Src/usbd_dfu_if.c **** /**
 152:Src/usbd_dfu_if.c ****   * @brief  Memory initialization routine.
 153:Src/usbd_dfu_if.c ****   * @retval USBD_OK if operation is successful, MAL_FAIL else.
 154:Src/usbd_dfu_if.c ****   */
 155:Src/usbd_dfu_if.c **** uint16_t MEM_If_Init_FS(void)
 156:Src/usbd_dfu_if.c **** {
  26              		.loc 1 156 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
 157:Src/usbd_dfu_if.c ****   /* USER CODE BEGIN 0 */
 158:Src/usbd_dfu_if.c ****   return (USBD_OK);
  31              		.loc 1 158 3 view .LVU1
 159:Src/usbd_dfu_if.c ****   /* USER CODE END 0 */
 160:Src/usbd_dfu_if.c **** }
  32              		.loc 1 160 1 is_stmt 0 view .LVU2
  33 0000 0020     		movs	r0, #0
  34              		@ sp needed
  35 0002 7047     		bx	lr
  36              		.cfi_endproc
  37              	.LFE43:
  39              		.section	.text.MEM_If_DeInit_FS,"ax",%progbits
  40              		.align	1
  41              		.syntax unified
  42              		.code	16
  43              		.thumb_func
  44              		.fpu softvfp
  46              	MEM_If_DeInit_FS:
  47              	.LFB44:
 161:Src/usbd_dfu_if.c **** 
 162:Src/usbd_dfu_if.c **** /**
 163:Src/usbd_dfu_if.c ****   * @brief  De-Initializes Memory
 164:Src/usbd_dfu_if.c ****   * @retval USBD_OK if operation is successful, MAL_FAIL else
 165:Src/usbd_dfu_if.c ****   */
 166:Src/usbd_dfu_if.c **** uint16_t MEM_If_DeInit_FS(void)
 167:Src/usbd_dfu_if.c **** {
  48              		.loc 1 167 1 is_stmt 1 view -0
  49              		.cfi_startproc
  50              		@ args = 0, pretend = 0, frame = 0
  51              		@ frame_needed = 0, uses_anonymous_args = 0
  52              		@ link register save eliminated.
 168:Src/usbd_dfu_if.c ****   /* USER CODE BEGIN 1 */
 169:Src/usbd_dfu_if.c ****   return (USBD_OK);
  53              		.loc 1 169 3 view .LVU4
 170:Src/usbd_dfu_if.c ****   /* USER CODE END 1 */
 171:Src/usbd_dfu_if.c **** }
  54              		.loc 1 171 1 is_stmt 0 view .LVU5
  55 0000 0020     		movs	r0, #0
  56              		@ sp needed
  57 0002 7047     		bx	lr
  58              		.cfi_endproc
  59              	.LFE44:
  61              		.section	.text.MEM_If_Erase_FS,"ax",%progbits
ARM GAS  /tmp/ccuPWxjq.s 			page 5


  62              		.align	1
  63              		.syntax unified
  64              		.code	16
  65              		.thumb_func
  66              		.fpu softvfp
  68              	MEM_If_Erase_FS:
  69              	.LVL0:
  70              	.LFB45:
 172:Src/usbd_dfu_if.c **** 
 173:Src/usbd_dfu_if.c **** /**
 174:Src/usbd_dfu_if.c ****   * @brief  Erase sector.
 175:Src/usbd_dfu_if.c ****   * @param  Add: Address of sector to be erased.
 176:Src/usbd_dfu_if.c ****   * @retval 0 if operation is successful, MAL_FAIL else.
 177:Src/usbd_dfu_if.c ****   */
 178:Src/usbd_dfu_if.c **** uint16_t MEM_If_Erase_FS(uint32_t Add)
 179:Src/usbd_dfu_if.c **** {
  71              		.loc 1 179 1 is_stmt 1 view -0
  72              		.cfi_startproc
  73              		@ args = 0, pretend = 0, frame = 0
  74              		@ frame_needed = 0, uses_anonymous_args = 0
  75              		@ link register save eliminated.
 180:Src/usbd_dfu_if.c ****   /* USER CODE BEGIN 2 */
 181:Src/usbd_dfu_if.c **** 
 182:Src/usbd_dfu_if.c ****   return (USBD_OK);
  76              		.loc 1 182 3 view .LVU7
 183:Src/usbd_dfu_if.c ****   /* USER CODE END 2 */
 184:Src/usbd_dfu_if.c **** }
  77              		.loc 1 184 1 is_stmt 0 view .LVU8
  78 0000 0020     		movs	r0, #0
  79              	.LVL1:
  80              		.loc 1 184 1 view .LVU9
  81              		@ sp needed
  82 0002 7047     		bx	lr
  83              		.cfi_endproc
  84              	.LFE45:
  86              		.section	.text.MEM_If_Write_FS,"ax",%progbits
  87              		.align	1
  88              		.syntax unified
  89              		.code	16
  90              		.thumb_func
  91              		.fpu softvfp
  93              	MEM_If_Write_FS:
  94              	.LVL2:
  95              	.LFB46:
 185:Src/usbd_dfu_if.c **** 
 186:Src/usbd_dfu_if.c **** /**
 187:Src/usbd_dfu_if.c ****   * @brief  Memory write routine.
 188:Src/usbd_dfu_if.c ****   * @param  src: Pointer to the source buffer. Address to be written to.
 189:Src/usbd_dfu_if.c ****   * @param  dest: Pointer to the destination buffer.
 190:Src/usbd_dfu_if.c ****   * @param  Len: Number of data to be written (in bytes).
 191:Src/usbd_dfu_if.c ****   * @retval USBD_OK if operation is successful, MAL_FAIL else.
 192:Src/usbd_dfu_if.c ****   */
 193:Src/usbd_dfu_if.c **** uint16_t MEM_If_Write_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
 194:Src/usbd_dfu_if.c **** {
  96              		.loc 1 194 1 is_stmt 1 view -0
  97              		.cfi_startproc
  98              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccuPWxjq.s 			page 6


  99              		@ frame_needed = 0, uses_anonymous_args = 0
 100              		@ link register save eliminated.
 195:Src/usbd_dfu_if.c ****   /* USER CODE BEGIN 3 */
 196:Src/usbd_dfu_if.c ****   return (USBD_OK);
 101              		.loc 1 196 3 view .LVU11
 197:Src/usbd_dfu_if.c ****   /* USER CODE END 3 */
 198:Src/usbd_dfu_if.c **** }
 102              		.loc 1 198 1 is_stmt 0 view .LVU12
 103 0000 0020     		movs	r0, #0
 104              	.LVL3:
 105              		.loc 1 198 1 view .LVU13
 106              		@ sp needed
 107 0002 7047     		bx	lr
 108              		.cfi_endproc
 109              	.LFE46:
 111              		.section	.text.MEM_If_Read_FS,"ax",%progbits
 112              		.align	1
 113              		.syntax unified
 114              		.code	16
 115              		.thumb_func
 116              		.fpu softvfp
 118              	MEM_If_Read_FS:
 119              	.LVL4:
 120              	.LFB47:
 199:Src/usbd_dfu_if.c **** 
 200:Src/usbd_dfu_if.c **** /**
 201:Src/usbd_dfu_if.c ****   * @brief  Memory read routine.
 202:Src/usbd_dfu_if.c ****   * @param  src: Pointer to the source buffer. Address to be written to.
 203:Src/usbd_dfu_if.c ****   * @param  dest: Pointer to the destination buffer.
 204:Src/usbd_dfu_if.c ****   * @param  Len: Number of data to be read (in bytes).
 205:Src/usbd_dfu_if.c ****   * @retval Pointer to the physical address where data should be read.
 206:Src/usbd_dfu_if.c ****   */
 207:Src/usbd_dfu_if.c **** uint8_t *MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
 208:Src/usbd_dfu_if.c **** {
 121              		.loc 1 208 1 is_stmt 1 view -0
 122              		.cfi_startproc
 123              		@ args = 0, pretend = 0, frame = 0
 124              		@ frame_needed = 0, uses_anonymous_args = 0
 125              		@ link register save eliminated.
 209:Src/usbd_dfu_if.c ****   /* Return a valid address to avoid HardFault */
 210:Src/usbd_dfu_if.c ****   /* USER CODE BEGIN 4 */
 211:Src/usbd_dfu_if.c ****   return (uint8_t*)(USBD_OK);
 126              		.loc 1 211 3 view .LVU15
 212:Src/usbd_dfu_if.c ****   /* USER CODE END 4 */
 213:Src/usbd_dfu_if.c **** }
 127              		.loc 1 213 1 is_stmt 0 view .LVU16
 128 0000 0020     		movs	r0, #0
 129              	.LVL5:
 130              		.loc 1 213 1 view .LVU17
 131              		@ sp needed
 132 0002 7047     		bx	lr
 133              		.cfi_endproc
 134              	.LFE47:
 136              		.section	.text.MEM_If_GetStatus_FS,"ax",%progbits
 137              		.align	1
 138              		.syntax unified
 139              		.code	16
ARM GAS  /tmp/ccuPWxjq.s 			page 7


 140              		.thumb_func
 141              		.fpu softvfp
 143              	MEM_If_GetStatus_FS:
 144              	.LVL6:
 145              	.LFB48:
 214:Src/usbd_dfu_if.c **** 
 215:Src/usbd_dfu_if.c **** /**
 216:Src/usbd_dfu_if.c ****   * @brief  Get status routine
 217:Src/usbd_dfu_if.c ****   * @param  Add: Address to be read from
 218:Src/usbd_dfu_if.c ****   * @param  Cmd: Number of data to be read (in bytes)
 219:Src/usbd_dfu_if.c ****   * @param  buffer: used for returning the time necessary for a program or an erase operation
 220:Src/usbd_dfu_if.c ****   * @retval USBD_OK if operation is successful
 221:Src/usbd_dfu_if.c ****   */
 222:Src/usbd_dfu_if.c **** uint16_t MEM_If_GetStatus_FS(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
 223:Src/usbd_dfu_if.c **** {
 146              		.loc 1 223 1 is_stmt 1 view -0
 147              		.cfi_startproc
 148              		@ args = 0, pretend = 0, frame = 0
 149              		@ frame_needed = 0, uses_anonymous_args = 0
 150              		@ link register save eliminated.
 224:Src/usbd_dfu_if.c ****   /* USER CODE BEGIN 5 */
 225:Src/usbd_dfu_if.c ****   switch (Cmd)
 151              		.loc 1 225 3 view .LVU19
 226:Src/usbd_dfu_if.c ****   {
 227:Src/usbd_dfu_if.c ****     case DFU_MEDIA_PROGRAM:
 228:Src/usbd_dfu_if.c **** 
 229:Src/usbd_dfu_if.c ****     break;
 230:Src/usbd_dfu_if.c **** 
 231:Src/usbd_dfu_if.c ****     case DFU_MEDIA_ERASE:
 232:Src/usbd_dfu_if.c ****     default:
 233:Src/usbd_dfu_if.c **** 
 234:Src/usbd_dfu_if.c ****     break;
 235:Src/usbd_dfu_if.c ****   }
 236:Src/usbd_dfu_if.c ****   return (USBD_OK);
 152              		.loc 1 236 3 view .LVU20
 237:Src/usbd_dfu_if.c ****   /* USER CODE END 5 */
 238:Src/usbd_dfu_if.c **** }
 153              		.loc 1 238 1 is_stmt 0 view .LVU21
 154 0000 0020     		movs	r0, #0
 155              	.LVL7:
 156              		.loc 1 238 1 view .LVU22
 157              		@ sp needed
 158 0002 7047     		bx	lr
 159              		.cfi_endproc
 160              	.LFE48:
 162              		.global	USBD_DFU_fops_FS
 163              		.section	.rodata.str1.4,"aMS",%progbits,1
 164              		.align	2
 165              	.LC0:
 166 0000 40496E74 		.ascii	"@Internal Flash   /0x08000000/03*016Ka,01*016Kg,01*"
 166      65726E61 
 166      6C20466C 
 166      61736820 
 166      20202F30 
 167 0033 3036344B 		.ascii	"064Kg,07*128Kg,04*016Kg,01*064Kg,07*128Kg\000"
 167      672C3037 
 167      2A313238 
ARM GAS  /tmp/ccuPWxjq.s 			page 8


 167      4B672C30 
 167      342A3031 
 168              		.section	.data.USBD_DFU_fops_FS,"aw"
 169              		.align	2
 172              	USBD_DFU_fops_FS:
 173 0000 00000000 		.word	.LC0
 174 0004 00000000 		.word	MEM_If_Init_FS
 175 0008 00000000 		.word	MEM_If_DeInit_FS
 176 000c 00000000 		.word	MEM_If_Erase_FS
 177 0010 00000000 		.word	MEM_If_Write_FS
 178 0014 00000000 		.word	MEM_If_Read_FS
 179 0018 00000000 		.word	MEM_If_GetStatus_FS
 180              		.text
 181              	.Letext0:
 182              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 183              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.3.0/include/stddef.h"
 184              		.file 4 "/usr/arm-none-eabi/include/sys/_types.h"
 185              		.file 5 "/usr/arm-none-eabi/include/sys/reent.h"
 186              		.file 6 "/usr/arm-none-eabi/include/sys/lock.h"
 187              		.file 7 "/usr/arm-none-eabi/include/sys/_stdint.h"
 188              		.file 8 "/usr/arm-none-eabi/include/stdlib.h"
 189              		.file 9 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/system_stm32f0xx.h"
 190              		.file 10 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
 191              		.file 11 "Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_def.h"
 192              		.file 12 "Middlewares/ST/STM32_USB_Device_Library/Class/DFU/Inc/usbd_dfu.h"
 193              		.file 13 "Inc/usbd_dfu_if.h"
ARM GAS  /tmp/ccuPWxjq.s 			page 9


DEFINED SYMBOLS
                            *ABS*:0000000000000000 usbd_dfu_if.c
     /tmp/ccuPWxjq.s:16     .text.MEM_If_Init_FS:0000000000000000 $t
     /tmp/ccuPWxjq.s:23     .text.MEM_If_Init_FS:0000000000000000 MEM_If_Init_FS
     /tmp/ccuPWxjq.s:40     .text.MEM_If_DeInit_FS:0000000000000000 $t
     /tmp/ccuPWxjq.s:46     .text.MEM_If_DeInit_FS:0000000000000000 MEM_If_DeInit_FS
     /tmp/ccuPWxjq.s:62     .text.MEM_If_Erase_FS:0000000000000000 $t
     /tmp/ccuPWxjq.s:68     .text.MEM_If_Erase_FS:0000000000000000 MEM_If_Erase_FS
     /tmp/ccuPWxjq.s:87     .text.MEM_If_Write_FS:0000000000000000 $t
     /tmp/ccuPWxjq.s:93     .text.MEM_If_Write_FS:0000000000000000 MEM_If_Write_FS
     /tmp/ccuPWxjq.s:112    .text.MEM_If_Read_FS:0000000000000000 $t
     /tmp/ccuPWxjq.s:118    .text.MEM_If_Read_FS:0000000000000000 MEM_If_Read_FS
     /tmp/ccuPWxjq.s:137    .text.MEM_If_GetStatus_FS:0000000000000000 $t
     /tmp/ccuPWxjq.s:143    .text.MEM_If_GetStatus_FS:0000000000000000 MEM_If_GetStatus_FS
     /tmp/ccuPWxjq.s:172    .data.USBD_DFU_fops_FS:0000000000000000 USBD_DFU_fops_FS
     /tmp/ccuPWxjq.s:164    .rodata.str1.4:0000000000000000 $d
     /tmp/ccuPWxjq.s:169    .data.USBD_DFU_fops_FS:0000000000000000 $d

NO UNDEFINED SYMBOLS
